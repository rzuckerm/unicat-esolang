# This program converts input ASCII digits to a number

# Read input
0o00 ðŸ˜ºðŸ˜¼ðŸ˜¿ðŸ™€ðŸ™€ Memory 7 through N+8 = input (N characters), newline, null

# Initialize variables
0o01 ðŸ˜»ðŸ˜¹ðŸ˜¸ðŸ™€ðŸ™€ðŸ˜¸ðŸ™€ðŸ™€ Memory 0 = 0 (n)
0o02 ðŸ˜»ðŸ˜¹ðŸ˜¹ðŸ™€ðŸ™€ðŸ˜¿ðŸ™€ðŸ™€ Memory 1 = 7 (input_ptr = address of input)

# Initialize constants
0o03 ðŸ˜»ðŸ˜¹ðŸ˜ºðŸ™€ðŸ™€ðŸ˜¾ðŸ˜¸ðŸ™€ðŸ™€ Memory 2 = 0o60 (48 = '0')
0o04 ðŸ˜»ðŸ˜¹ðŸ˜»ðŸ™€ðŸ™€ðŸ˜¹ðŸ˜ºðŸ™€ðŸ™€ Memory 3 = 0o12 (10)
0o05 ðŸ˜»ðŸ˜¹ðŸ˜¼ðŸ™€ðŸ™€ðŸ˜¹ðŸ™€ðŸ™€ Memory 4 = 1

# Loop start: Get contents of input_ptr
0o06 ðŸ˜»ðŸ˜¹ðŸ˜½ðŸ™€ðŸ™€ðŸ˜¸ðŸ™€ðŸ™€ Memory 5 = 0
0o07 ðŸ˜¿ðŸ™€ðŸ˜¼ðŸ˜½ðŸ™€ðŸ™€ðŸ˜¹ðŸ™€ðŸ™€ Memory 5 += Memory 1 (input_ptr)
0o10 ðŸ˜¼ðŸ˜¾ðŸ˜½ðŸ™€ðŸ™€ Memory 5 = pointer(Memory 5) (digit)
0o11 ðŸ˜¿ðŸ™€ðŸ˜¸ðŸ˜¹ðŸ™€ðŸ™€ðŸ˜¼ðŸ™€ðŸ™€ Memory 1 += Memory 4 (increment input_ptr)

# Convert digit to number
0o12 ðŸ˜¿ðŸ™€ðŸ˜ºðŸ˜½ðŸ™€ðŸ™€ðŸ˜ºðŸ™€ðŸ™€ Memory 5 -= Memory 2 (value = char - '0')

# If invalid digit, exit loop_count
0o13 ðŸ˜»ðŸ˜¹ðŸ˜¾ðŸ™€ðŸ™€ðŸ˜¹ðŸ˜¹ðŸ™€ðŸ˜¿ Memory 6 = -0o11 (-9)
0o14 ðŸ˜¿ðŸ™€ðŸ˜¾ðŸ˜¾ðŸ™€ðŸ™€ðŸ˜½ðŸ™€ðŸ™€ Memory 6 += Memory 5 (value - 9)
0o15 ðŸ˜½ðŸ˜¿ðŸ˜¾ðŸ™€ðŸ™€ðŸ˜ºðŸ˜»ðŸ™€ðŸ™€ If Memory 6 > 0, jump to 0o24 (0o23 + 1) (if value > 9)
0o16 ðŸ˜»ðŸ˜¹ðŸ˜¾ðŸ™€ðŸ™€ðŸ˜¸ðŸ™€ðŸ™€ Memory 6 = 0
0o17 ðŸ˜¿ðŸ™€ðŸ˜ºðŸ˜¾ðŸ™€ðŸ™€ðŸ˜½ðŸ™€ðŸ™€ Memory 6 -= Memory 5 (-value)
0o20 ðŸ˜½ðŸ˜¿ðŸ˜¾ðŸ™€ðŸ™€ðŸ˜ºðŸ˜»ðŸ™€ðŸ™€ If Memory 6 > 0, jump to 0o24 (0o23 + 1) (if value < 0)

# n = n * 10 + value
0o21 ðŸ˜¿ðŸ™€ðŸ™€ðŸ˜¸ðŸ™€ðŸ™€ðŸ˜»ðŸ™€ðŸ™€ Memory 0 *= Memory 3 (n * 10)
0o22 ðŸ˜¿ðŸ™€ðŸ˜¸ðŸ˜¸ðŸ™€ðŸ™€ðŸ˜½ðŸ™€ðŸ™€ Memory 0 += Memory 5 (n * 10 + value)
0o23 ðŸ˜»ðŸ˜¹ðŸ˜¹ðŸ™€ðŸ˜¿ðŸ˜½ðŸ™€ðŸ™€ Jump to 6 (5 + 1)

0o24 ðŸ˜¼ðŸ˜¼ðŸ˜¸ðŸ™€ðŸ™€ Output value of 0
0o25 ðŸ˜½ðŸ˜¼ðŸ˜»ðŸ™€ðŸ™€ Output 3 (10 = '\n')
0o25 ðŸ™€ðŸ™€ Exit
